# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
# before_script:
#   - docker info

image: mcr.microsoft.com/dotnet/sdk:7.0

# place project specific paths in variables to make the rest of the script more generic
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    
variables:
  TESTS_FOLDER_PATH: 'FreshFood/Tests/UnitTests'
  #WEBAPI_FOLDER_PATH: 'FreshFood/Apis/WebAPI'
  CONTAINER_IMAGE_DEV: $CI_REGISTRY_IMAGE:develop

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - release

# Build solution for 'Development' environment
build-docker-job: 
    stage: build
    image: docker:27.2.0
    services: 
        - docker:27.2.0-dind
    script:
      docker build --pull -t $CONTAINER_IMAGE_DEV -f FreshFood/Apis/WebAPI/Dockerfile .
    #Trigger when merge request or push to develop
    rules:
      - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"
      - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "develop"

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - cd $TESTS_FOLDER_PATH
    - dotnet test --test-adapter-path:. --logger:"junit;LogFilePath=../artifacts/{assembly}-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose" --collect:"XPlat Code Coverage"
    - dotnet tool install -g dotnet-reportgenerator-globaltool
    - /root/.dotnet/tools/reportgenerator -reports:"TestResults/*/coverage.cobertura.xml" -targetdir:"$TESTS_FOLDER_PATH/coveragereport" -reporttypes:"Html" 
    - tar -czvf coveragereport.tar $TESTS_FOLDER_PATH/coveragereport/
  artifacts:
    when: always  # save test results even when the task fails
    expire_in: 1 week  # save gitlab server space, we copy the files we need to deploy folder later on
    paths:
      - ./**/*test-result.xml  # saving NUnit results to copy to deploy folder
      - $TESTS_FOLDER_PATH/TestResults/*/coverage.cobertura.xml # xml of code coverage
      - $TESTS_FOLDER_PATH/coveragereport.tar # folder with html files regarding code coverage
    reports:
      junit: ./**/*test-result.xml
      coverage_report:
        coverage_format: cobertura
        path: ./**/TestResults/**/coverage.cobertura.xml #$TESTS_FOLDER_PATH/TestResults/*/coverage.cobertura.xml
  dependencies:
    - build-docker-job
  coverage: /Total\s*\|\s*(\d+(?:\.\d+)?)/

# Push docker image into Docker Hub
publish-image-job:
  stage: release
  image: docker:27.2.0
  services: 
      - docker:27.2.0-dind
  script:    
    - docker push $CONTAINER_IMAGE_DEV    
  #Trigger when merge request or push to develop
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "develop"
  dependencies:
    - build-docker-job
    - unit-test-job