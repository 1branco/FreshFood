# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: mcr.microsoft.com/dotnet/sdk:7.0

# place project specific paths in variables to make the rest of the script more generic
variables:
  EXE_RELEASE_FOLDER: 'FreshFood\Apis\SecurityAPI\bin\Release'
  MSI_RELEASE_FOLDER: 'Setup\bin\Release'
  TEST_FOLDER: 'FreshFood\Tests\UnitTests\bin\Release'
  DEPLOY_FOLDER: 'P:\FreshFood\Builds'
  NUGET_PATH: 'C:\NuGet\nuget.exe'
  MSBUILD_PATH: 'C:\Program Files (x86)\MSBuild\14.0\Bin\msbuild.exe'
  NUNIT_PATH: 'C:\Program Files (x86)\NUnit.org\nunit-console\nunit3-console.exe'
  TESTS_FOLDER_PATH: 'FreshFood/Tests/UnitTests'
  WEBAPI_FOLDER_PATH: 'FreshFood/Apis/WebAPI'

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - "cd $WEBAPI_FOLDER_PATH && dotnet restore && dotnet build"    
    #- '& "$env:NUGET_PATH" restore'  # restore Nuget dependencies
    #- '& "$env:MSBUILD_PATH" /p:Configuration=Release'  # build the project
  artifacts:
    expire_in: 1 day  # save gitlab server space, we copy the files we need to deploy folder later on
   #paths:
     #- '$env:EXE_RELEASE_FOLDER\FreshFood.exe'  # saving exe to copy to deploy folder
     #- '$env:TEST_FOLDER\'  # saving entire Test project so NUnit can run tests

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
   #- '& "$env:NUNIT_PATH" ".\$env:TEST_FOLDER\UnitTests.dll"'  # running NUnit tests
    - 'cd $TESTS_FOLDER_PATH && dotnet test --test-adapter-path:. --logger:"xunit;LogFilePath=\artifacts\{assembly}-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose"'
  artifacts:
    when: always  # save test results even when the task fails
    expire_in: 1 week  # save gitlab server space, we copy the files we need to deploy folder later on
    paths:
      - '$TESTS_FOLDER_PATH\artifacts\{assembly}-test-result.xml'  # saving NUnit results to copy to deploy folder
    reports:
      junit:
       - '$TESTS_FOLDER_PATH\artifacts\{assembly}-test-result.xml'
  dependencies:
    - build-job

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  artifacts:
    paths:
      - publish/
  script:
     # - '$commitSubject = git log -1 --pretty=%s'
     # - '$deployFolder = $($env:DEPLOY_FOLDER) + "\" + $($env:CI_COMMIT_TAG) + " - " + $commitSubject + "\"'
     # xcopy takes care of recursively creating required folders
     # - 'xcopy /y ".\$env:EXE_RELEASE_FOLDER\FreshFood.exe" "$deployFolder"'
     # - 'xcopy /y ".\$env:MSI_RELEASE_FOLDER\FreshFood Setup.msi" "$deployFolder"'
     # - 'xcopy /y ".\TestResult.xml" "$deployFolder"'
      - dotnet publish -c Release -o ../publish FreshFood/FreshFood.csproj --no-restore
  dependencies:
    - build-job
    - unit-test-job
